//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\users\ale\documents\visual studio 2017\projects\compiler\logic\parser\grammar\coolgrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class coolgrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, CLASS=17, 
		INHERITS=18, LET=19, IN=20, WS=21, IF=22, THEN=23, ELSE=24, FI=25, WHILE=26, 
		LOOP=27, POOL=28, NEW=29, TYPE=30, ISVOID=31, INTEGER=32, ID=33, TRUE=34, 
		FALSE=35, NOT=36;
	public const int
		RULE_program = 0, RULE_class = 1, RULE_feature = 2, RULE_method = 3, RULE_attr = 4, 
		RULE_formal = 5, RULE_expr = 6, RULE_expr_list = 7, RULE_args_def = 8, 
		RULE_args_call = 9;
	public static readonly string[] ruleNames = {
		"program", "class", "feature", "method", "attr", "formal", "expr", "expr_list", 
		"args_def", "args_call"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'('", "')'", "':'", "'<-'", "','", "'*'", 
		"'/'", "'+'", "'-'", "'<'", "'<='", "'='", "'~'", "'class'", "'inherits'", 
		"'let'", "'in'", null, "'if'", "'then'", "'else'", "'fi'", "'while'", 
		"'loop'", "'pool'", "'new'", "'type'", "'isvoid'", null, null, "'true'", 
		"'false'", "'not'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "CLASS", "INHERITS", "LET", "IN", "WS", 
		"IF", "THEN", "ELSE", "FI", "WHILE", "LOOP", "POOL", "NEW", "TYPE", "ISVOID", 
		"INTEGER", "ID", "TRUE", "FALSE", "NOT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "coolgrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static coolgrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public coolgrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public coolgrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ClassContext[] @class() {
			return GetRuleContexts<ClassContext>();
		}
		public ClassContext @class(int i) {
			return GetRuleContext<ClassContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20; @class();
				State = 21; Match(T__0);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CLASS );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(coolgrammarParser.CLASS, 0); }
		public ITerminalNode[] TYPE() { return GetTokens(coolgrammarParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(coolgrammarParser.TYPE, i);
		}
		public ITerminalNode[] INHERITS() { return GetTokens(coolgrammarParser.INHERITS); }
		public ITerminalNode INHERITS(int i) {
			return GetToken(coolgrammarParser.INHERITS, i);
		}
		public FeatureContext[] feature() {
			return GetRuleContexts<FeatureContext>();
		}
		public FeatureContext feature(int i) {
			return GetRuleContext<FeatureContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 2, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(CLASS);
			State = 28; Match(TYPE);
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INHERITS) {
				{
				{
				State = 29; Match(INHERITS);
				State = 30; Match(TYPE);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36; Match(T__1);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 37; feature();
				State = 38; Match(T__0);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureContext : ParserRuleContext {
		public FeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature; } }
	 
		public FeatureContext() { }
		public virtual void CopyFrom(FeatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class F_methodContext : FeatureContext {
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public F_methodContext(FeatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF_method(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class F_attrContext : FeatureContext {
		public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public F_attrContext(FeatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureContext feature() {
		FeatureContext _localctx = new FeatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_feature);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new F_methodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; method();
				}
				break;
			case 2:
				_localctx = new F_attrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; attr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(coolgrammarParser.ID, 0); }
		public Args_defContext args_def() {
			return GetRuleContext<Args_defContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(coolgrammarParser.TYPE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 6, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(ID);
			State = 52; Match(T__3);
			State = 53; args_def();
			State = 54; Match(T__4);
			State = 55; Match(T__5);
			State = 56; Match(TYPE);
			State = 57; Match(T__1);
			State = 58; expr(0);
			State = 59; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public FormalContext formal() {
			return GetRuleContext<FormalContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 8, RULE_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; formal();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 62; Match(T__6);
				State = 63; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(coolgrammarParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(coolgrammarParser.TYPE, 0); }
		public FormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalContext formal() {
		FormalContext _localctx = new FormalContext(Context, State);
		EnterRule(_localctx, 10, RULE_formal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(ID);
			State = 67; Match(T__5);
			State = 68; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BodyContext : ExprContext {
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public BodyContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		public ITerminalNode ID() { return GetToken(coolgrammarParser.ID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetContext : ExprContext {
		public ITerminalNode LET() { return GetToken(coolgrammarParser.LET, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public ITerminalNode IN() { return GetToken(coolgrammarParser.IN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LetContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INTEGER() { return GetToken(coolgrammarParser.INTEGER, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsvoidContext : ExprContext {
		public ITerminalNode ISVOID() { return GetToken(coolgrammarParser.ISVOID, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IsvoidContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsvoid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumarestaContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumarestaContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaresta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : ExprContext {
		public ITerminalNode WHILE() { return GetToken(coolgrammarParser.WHILE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOOP() { return GetToken(coolgrammarParser.LOOP, 0); }
		public ITerminalNode POOL() { return GetToken(coolgrammarParser.POOL, 0); }
		public WhileContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Call_methodContext : ExprContext {
		public ITerminalNode ID() { return GetToken(coolgrammarParser.ID, 0); }
		public Args_callContext args_call() {
			return GetRuleContext<Args_callContext>(0);
		}
		public Call_methodContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_method(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode ID() { return GetToken(coolgrammarParser.ID, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class New_typeContext : ExprContext {
		public ITerminalNode NEW() { return GetToken(coolgrammarParser.NEW, 0); }
		public ITerminalNode TYPE() { return GetToken(coolgrammarParser.TYPE, 0); }
		public New_typeContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultdivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultdivContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultdiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentesisContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParentesisContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_expContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Unary_expContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_exp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExprContext {
		public ITerminalNode IF() { return GetToken(coolgrammarParser.IF, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(coolgrammarParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(coolgrammarParser.ELSE, 0); }
		public ITerminalNode FI() { return GetToken(coolgrammarParser.FI, 0); }
		public IfContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		public IToken cons;
		public ITerminalNode TRUE() { return GetToken(coolgrammarParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(coolgrammarParser.FALSE, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new Call_methodContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 71; Match(ID);
				State = 72; Match(T__3);
				State = 73; args_call();
				State = 74; Match(T__4);
				}
				break;
			case 2:
				{
				_localctx = new LetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76; Match(LET);
				State = 77; attr();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 78; Match(T__7);
					State = 79; attr();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85; Match(IN);
				State = 86; expr(15);
				}
				break;
			case 3:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; Match(IF);
				State = 89; expr(0);
				State = 90; Match(THEN);
				State = 91; expr(0);
				State = 92; Match(ELSE);
				State = 93; expr(0);
				State = 94; Match(FI);
				}
				break;
			case 4:
				{
				_localctx = new WhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96; Match(WHILE);
				State = 97; expr(0);
				State = 98; Match(LOOP);
				State = 99; expr(0);
				State = 100; Match(POOL);
				}
				break;
			case 5:
				{
				_localctx = new BodyContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; Match(T__1);
				State = 103; expr_list();
				State = 104; Match(T__2);
				}
				break;
			case 6:
				{
				_localctx = new New_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106; Match(NEW);
				State = 107; Match(TYPE);
				}
				break;
			case 7:
				{
				_localctx = new IsvoidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; Match(ISVOID);
				State = 109; expr(10);
				}
				break;
			case 8:
				{
				_localctx = new Unary_expContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 110;
				((Unary_expContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==NOT) ) {
					((Unary_expContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 111; expr(6);
				}
				break;
			case 9:
				{
				_localctx = new ParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112; Match(T__3);
				State = 113; expr(0);
				State = 114; Match(T__4);
				}
				break;
			case 10:
				{
				_localctx = new IdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116; Match(ID);
				}
				break;
			case 11:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117; Match(INTEGER);
				}
				break;
			case 12:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				((BoolContext)_localctx).cons = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
					((BoolContext)_localctx).cons = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				{
				_localctx = new AssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119; Match(ID);
				State = 120; Match(T__6);
				State = 121; expr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 133;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MultdivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 124;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 125;
						((MultdivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || _la==T__9) ) {
							((MultdivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126; expr(10);
						}
						break;
					case 2:
						{
						_localctx = new SumarestaContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 127;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 128;
						((SumarestaContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
							((SumarestaContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 129; expr(9);
						}
						break;
					case 3:
						{
						_localctx = new CompContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 130;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 131;
						((CompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
							((CompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 132; expr(8);
						}
						break;
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 138; expr(0);
				State = 139; Match(T__0);
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__15) | (1L << LET) | (1L << IF) | (1L << WHILE) | (1L << NEW) | (1L << ISVOID) | (1L << INTEGER) | (1L << ID) | (1L << TRUE) | (1L << FALSE) | (1L << NOT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Args_defContext : ParserRuleContext {
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public Args_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Args_defContext args_def() {
		Args_defContext _localctx = new Args_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_args_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 145; formal();
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 146; Match(T__7);
					State = 147; formal();
					}
					}
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Args_callContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Args_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcoolgrammarVisitor<TResult> typedVisitor = visitor as IcoolgrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Args_callContext args_call() {
		Args_callContext _localctx = new Args_callContext(Context, State);
		EnterRule(_localctx, 18, RULE_args_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__15) | (1L << LET) | (1L << IF) | (1L << WHILE) | (1L << NEW) | (1L << ISVOID) | (1L << INTEGER) | (1L << ID) | (1L << TRUE) | (1L << FALSE) | (1L << NOT))) != 0)) {
				{
				State = 155; expr(0);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__7) {
					{
					{
					State = 156; Match(T__7);
					State = 157; expr(0);
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xA8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x1A', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\x1B', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\"', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '%', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '+', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'.', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x34', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x43', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', 'S', '\n', '\b', '\f', '\b', '\xE', '\b', 'V', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'}', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\x88', '\n', '\b', '\f', '\b', '\xE', '\b', '\x8B', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\x90', '\n', '\t', '\r', 
		'\t', '\xE', '\t', '\x91', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '\x97', '\n', '\n', '\f', '\n', '\xE', '\n', '\x9A', '\v', '\n', 
		'\x5', '\n', '\x9C', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\xA1', '\n', '\v', '\f', '\v', '\xE', '\v', '\xA4', '\v', 
		'\v', '\x5', '\v', '\xA6', '\n', '\v', '\x3', '\v', '\x2', '\x3', '\xE', 
		'\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\a', '\x4', '\x2', '\x12', '\x12', '&', '&', '\x3', '\x2', '$', 
		'%', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', 
		'\xF', '\x11', '\x2', '\xB7', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x35', '\x3', '\x2', '\x2', '\x2', '\n', '?', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\x4', '\x3', '\x2', '\x17', 
		'\x18', '\a', '\x3', '\x2', '\x2', '\x18', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '\x13', '\x2', '\x2', '\x1E', '#', '\a', 
		' ', '\x2', '\x2', '\x1F', ' ', '\a', '\x14', '\x2', '\x2', ' ', '\"', 
		'\a', ' ', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', 
		'%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x3', '\x2', '\x2', '\x2', 
		'%', '#', '\x3', '\x2', '\x2', '\x2', '&', ',', '\a', '\x4', '\x2', '\x2', 
		'\'', '(', '\x5', '\x6', '\x4', '\x2', '(', ')', '\a', '\x3', '\x2', '\x2', 
		')', '+', '\x3', '\x2', '\x2', '\x2', '*', '\'', '\x3', '\x2', '\x2', 
		'\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '/', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x5', 
		'\x2', '\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', 
		'\x5', '\b', '\x5', '\x2', '\x32', '\x34', '\x5', '\n', '\x6', '\x2', 
		'\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '#', '\x2', '\x2', '\x36', '\x37', '\a', '\x6', '\x2', '\x2', '\x37', 
		'\x38', '\x5', '\x12', '\n', '\x2', '\x38', '\x39', '\a', '\a', '\x2', 
		'\x2', '\x39', ':', '\a', '\b', '\x2', '\x2', ':', ';', '\a', ' ', '\x2', 
		'\x2', ';', '<', '\a', '\x4', '\x2', '\x2', '<', '=', '\x5', '\xE', '\b', 
		'\x2', '=', '>', '\a', '\x5', '\x2', '\x2', '>', '\t', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x42', '\x5', '\f', '\a', '\x2', '@', '\x41', '\a', '\t', 
		'\x2', '\x2', '\x41', '\x43', '\x5', '\xE', '\b', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '#', '\x2', 
		'\x2', '\x45', '\x46', '\a', '\b', '\x2', '\x2', '\x46', 'G', '\a', ' ', 
		'\x2', '\x2', 'G', '\r', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\b', '\b', 
		'\x1', '\x2', 'I', 'J', '\a', '#', '\x2', '\x2', 'J', 'K', '\a', '\x6', 
		'\x2', '\x2', 'K', 'L', '\x5', '\x14', '\v', '\x2', 'L', 'M', '\a', '\a', 
		'\x2', '\x2', 'M', '}', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x15', 
		'\x2', '\x2', 'O', 'T', '\x5', '\n', '\x6', '\x2', 'P', 'Q', '\a', '\n', 
		'\x2', '\x2', 'Q', 'S', '\x5', '\n', '\x6', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x16', 
		'\x2', '\x2', 'X', 'Y', '\x5', '\xE', '\b', '\x11', 'Y', '}', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\a', '\x18', '\x2', '\x2', '[', '\\', '\x5', 
		'\xE', '\b', '\x2', '\\', ']', '\a', '\x19', '\x2', '\x2', ']', '^', '\x5', 
		'\xE', '\b', '\x2', '^', '_', '\a', '\x1A', '\x2', '\x2', '_', '`', '\x5', 
		'\xE', '\b', '\x2', '`', '\x61', '\a', '\x1B', '\x2', '\x2', '\x61', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x1C', '\x2', '\x2', 
		'\x63', '\x64', '\x5', '\xE', '\b', '\x2', '\x64', '\x65', '\a', '\x1D', 
		'\x2', '\x2', '\x65', '\x66', '\x5', '\xE', '\b', '\x2', '\x66', 'g', 
		'\a', '\x1E', '\x2', '\x2', 'g', '}', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\a', '\x4', '\x2', '\x2', 'i', 'j', '\x5', '\x10', '\t', '\x2', 
		'j', 'k', '\a', '\x5', '\x2', '\x2', 'k', '}', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\a', '\x1F', '\x2', '\x2', 'm', '}', '\a', ' ', '\x2', '\x2', 
		'n', 'o', '\a', '!', '\x2', '\x2', 'o', '}', '\x5', '\xE', '\b', '\f', 
		'p', 'q', '\t', '\x2', '\x2', '\x2', 'q', '}', '\x5', '\xE', '\b', '\b', 
		'r', 's', '\a', '\x6', '\x2', '\x2', 's', 't', '\x5', '\xE', '\b', '\x2', 
		't', 'u', '\a', '\a', '\x2', '\x2', 'u', '}', '\x3', '\x2', '\x2', '\x2', 
		'v', '}', '\a', '#', '\x2', '\x2', 'w', '}', '\a', '\"', '\x2', '\x2', 
		'x', '}', '\t', '\x3', '\x2', '\x2', 'y', 'z', '\a', '#', '\x2', '\x2', 
		'z', '{', '\a', '\t', '\x2', '\x2', '{', '}', '\x5', '\xE', '\b', '\x3', 
		'|', 'H', '\x3', '\x2', '\x2', '\x2', '|', 'N', '\x3', '\x2', '\x2', '\x2', 
		'|', 'Z', '\x3', '\x2', '\x2', '\x2', '|', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '|', 'h', '\x3', '\x2', '\x2', '\x2', '|', 'l', '\x3', '\x2', '\x2', 
		'\x2', '|', 'n', '\x3', '\x2', '\x2', '\x2', '|', 'p', '\x3', '\x2', '\x2', 
		'\x2', '|', 'r', '\x3', '\x2', '\x2', '\x2', '|', 'v', '\x3', '\x2', '\x2', 
		'\x2', '|', 'w', '\x3', '\x2', '\x2', '\x2', '|', 'x', '\x3', '\x2', '\x2', 
		'\x2', '|', 'y', '\x3', '\x2', '\x2', '\x2', '}', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\f', '\v', '\x2', '\x2', '\x7F', '\x80', '\t', 
		'\x4', '\x2', '\x2', '\x80', '\x88', '\x5', '\xE', '\b', '\f', '\x81', 
		'\x82', '\f', '\n', '\x2', '\x2', '\x82', '\x83', '\t', '\x5', '\x2', 
		'\x2', '\x83', '\x88', '\x5', '\xE', '\b', '\v', '\x84', '\x85', '\f', 
		'\t', '\x2', '\x2', '\x85', '\x86', '\t', '\x6', '\x2', '\x2', '\x86', 
		'\x88', '\x5', '\xE', '\b', '\n', '\x87', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x81', '\x3', '\x2', '\x2', '\x2', '\x87', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x5', '\xE', '\b', '\x2', '\x8D', '\x8E', 
		'\a', '\x3', '\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x98', '\x5', '\f', '\a', '\x2', '\x94', '\x95', '\a', '\n', 
		'\x2', '\x2', '\x95', '\x97', '\x5', '\f', '\a', '\x2', '\x96', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\xA2', '\x5', '\xE', '\b', '\x2', '\x9E', '\x9F', 
		'\a', '\n', '\x2', '\x2', '\x9F', '\xA1', '\x5', '\xE', '\b', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x1B', '#', ',', '\x33', '\x42', 'T', '|', 
		'\x87', '\x89', '\x91', '\x98', '\x9B', '\xA2', '\xA5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
